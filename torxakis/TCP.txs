-- Delays are in milliseconds, percentages are 0-100
TYPEDEF Tampering ::=
	Delay { delay :: Int }
	| JitteredDelay { jitterDelay :: Int ; jitter :: Int }
	| PacketDrops { loss :: Int }
	| LowThroughput { rate :: Int ; burst :: Int ; latency :: Int }
	| Reordering { reorder :: Int ; correlation :: Int }
	| Duplication { duplicate :: Int } 
	| Bitflips { corrupt :: Int }
	| None
ENDDEF

TYPEDEF TamperingPair ::=
	TamperingPair { first :: Tampering ; second :: Tampering }
ENDDEF

-- A packet is encoded as a string for now
TYPEDEF PacketList ::=
	Packet_nil
	| Packet_cons { head :: String ; tail :: PacketList }
ENDDEF

FUNCDEF isValid_Packet (str :: String) :: Bool ::=
	len(str) == 5 /\ strinre(str, REGEX('[A-Z]*'))
ENDDEF

TYPEDEF PacketListAndTampering ::=
	PacketListAndTampering { tamperingPair :: TamperingPair ; packetList :: PacketList }
ENDDEF

FUNCDEF lengthPacketList (pl :: PacketList) :: Int ::=
	IF isPacket_nil(pl)
	THEN 0
	ELSE lengthPacketList(tail(pl)) + 1
	FI
ENDDEF

FUNCDEF isValid_PacketList (pl :: PacketList) :: Bool ::=
	IF isPacket_nil(pl)
	THEN True
	ELSE isValid_Packet(head(pl)) /\ isValid_PacketList(tail(pl))
	FI
ENDDEF

FUNCDEF isValid_Tampering (t :: Tampering) :: Bool ::=
	IF isDelay(t)
	THEN (delay(t) > 0) /\ (delay(t) < 400)
	ELSE
		IF isJitteredDelay(t)
		THEN (jitterDelay(t) > 0) /\ (jitterDelay(t) < 400) /\ (jitter(t) > 0) /\ (jitter(t) < 320) 
		ELSE
			IF isPacketDrops(t)
			THEN (loss(t) > 0) /\ (loss(t) < 55)
			ELSE
				IF isLowThroughput(t)
				THEN (rate(t) > 0) /\ (rate(t) < 400) /\ (burst(t) > 0) /\ (burst(t) < 1028) /\ (latency(t) > 0) /\ (latency(t) < 500)
				ELSE
					IF isReordering(t)
					THEN (reorder(t) > 0) /\ (reorder(t) < 55) /\ (correlation(t) > 0) /\ (correlation(t) < 70)
					ELSE
						IF isDuplication(t)
						THEN (duplicate(t) > 0) /\ (duplicate(t) < 55)
						ELSE
							IF isBitflips(t)
							THEN (corrupt(t) > 0) /\ (corrupt(t) < 55)
							ELSE True
							FI
						FI
					FI
				FI
			FI
		FI
	FI
ENDDEF

FUNCDEF isValid_TamperingPair (tp :: TamperingPair) :: Bool ::=
	IF isValid_Tampering(first(tp)) /\ isValid_Tampering(second(tp))
	THEN
		not (isNone(first(tp)) /\ isNone(second(tp)))
		/\ (isNone(first(tp)) \/ isNone(second(tp))
		    \/ (isJitteredDelay(first(tp)) /\ isLowThroughput(second(tp)))
			\/ (isLowThroughput(first(tp)) /\ isJitteredDelay(second(tp)))
			\/ (isReordering(first(tp)) /\ isDuplication(second(tp)))
			\/ (isDuplication(first(tp)) /\ isReordering(second(tp)))
			\/ (isPacketDrops(first(tp)) /\ isLowThroughput(second(tp)))
			\/ (isLowThroughput(first(tp)) /\ isPacketDrops(second(tp)))
			\/ (isDuplication(first(tp)) /\ isBitflips(second(tp)))
			\/ (isBitflips(first(tp)) /\ isDuplication(second(tp)))
			)
	ELSE False
	FI
ENDDEF

PROCDEF examples [In :: PacketListAndTampering; Out :: PacketList] () HIT ::=
		In ! PacketListAndTampering(TamperingPair(None,LowThroughput(4,18,61)),Packet_cons("FDAEA",Packet_cons("PHDPZ",Packet_cons("HDBBH",Packet_cons("PBAHP",Packet_cons("PPHBB",Packet_nil))))))
	>-> Out ! Packet_cons("FDAEA",Packet_cons("PHDPZ",Packet_cons("HDBBH",Packet_cons("PBAHP",Packet_cons("PPHBB",Packet_nil)))))
	>-> In ! PacketListAndTampering(TamperingPair(JitteredDelay(41,29),LowThroughput(92,47,13)),Packet_cons("DBDPA",Packet_cons("BHQDH",Packet_nil)))
	>-> Out ! Packet_cons("DBDPA",Packet_cons("BHQDH",Packet_nil))
	>-> In ! PacketListAndTampering(TamperingPair(LowThroughput(100,72,67),None),Packet_cons("CBDAJ",Packet_cons("CDHDD",Packet_cons("PHTHB",Packet_cons("PBABP",Packet_cons("PDAHH",Packet_nil))))))
	>-> Out ! Packet_cons("CBDAJ",Packet_cons("CDHDD",Packet_cons("PHTHB",Packet_cons("PBABP",Packet_cons("PDAHH",Packet_nil)))))
	>-> In ! PacketListAndTampering(TamperingPair(Reordering(1,29),Duplication(1)),Packet_cons("NBABB",Packet_cons("CLHDQ",Packet_cons("HACBB",Packet_cons("AHHAD",Packet_cons("AADBB",Packet_nil))))))
	>-> Out ! Packet_cons("NBABB",Packet_cons("CLHDQ",Packet_cons("HACBB",Packet_cons("AHHAD",Packet_cons("AADBB",Packet_nil)))))
	>-> In ! PacketListAndTampering(TamperingPair(None,Reordering(15,1)), Packet_cons("DADZF",Packet_cons("PKAAH",Packet_cons("ADEPA",Packet_cons("JDAPA",Packet_nil)))))
	>-> Out ! Packet_cons("DADZF",Packet_cons("PKAAH",Packet_cons("ADEPA",Packet_cons("JDAPA",Packet_nil))))
	>-> In ! PacketListAndTampering(TamperingPair(None,Delay(17)),Packet_cons("BHZBA",Packet_cons("PZDAB",Packet_cons("BHDBD",Packet_cons("HHABH",Packet_cons("AHPHA",Packet_nil))))))
	>-> Out ! Packet_cons("BHZBA",Packet_cons("PZDAB",Packet_cons("BHDBD",Packet_cons("HHABH",Packet_cons("AHPHA",Packet_nil)))))
	>-> In ! PacketListAndTampering(TamperingPair(None,Delay(24)),Packet_cons("NDDSJ",Packet_cons("ZSPWD",Packet_cons("BHDHP",Packet_cons("BDAHH",Packet_cons("QDAPA",Packet_nil))))))
	>-> Out ! Packet_cons("NDDSJ",Packet_cons("ZSPWD",Packet_cons("BHDHP",Packet_cons("BDAHH",Packet_cons("QDAPA",Packet_nil)))))
	>-> In ! PacketListAndTampering(TamperingPair(PacketDrops(51),LowThroughput(1,2,10)),Packet_cons("BPBAD",Packet_nil))
	>-> Out ! Packet_cons("BPBAD",Packet_nil)
	>-> In ! PacketListAndTampering(TamperingPair(Reordering(11,58),Duplication(40)),Packet_cons("HELLO",Packet_cons("DHGQD",Packet_cons("IHDCC",Packet_cons("ABLBP",Packet_cons("DBDBD",Packet_cons("DHABB",Packet_nil)))))))
	>-> Out ! Packet_cons("HELLO",Packet_cons("DHGQD",Packet_cons("IHDCC",Packet_cons("ABLBP",Packet_cons("DBDBD",Packet_cons("DHABB",Packet_nil))))))
ENDDEF

PURPDEF Purp ::=
	CHAN IN In
	CHAN OUT Out

	GOAL examples ::= examples [In, Out] ()
ENDDEF

CHANDEF Channels ::=
	In :: PacketListAndTampering ;
	Out :: PacketList
ENDDEF

PROCDEF proc [ In :: PacketListAndTampering; Out :: PacketList ] () ::=
	In ? x [[
		isValid_TamperingPair(tamperingPair(x))
		/\ (lengthPacketList(packetList(x)) == 5)
		/\ isValid_PacketList(packetList(x)) ]]
	>-> Out ! packetList(x)
	>-> proc [ In, Out ] ()
ENDDEF

MODELDEF TCP ::=
	CHAN IN  In
	CHAN OUT Out
	
	BEHAVIOUR proc [ In, Out ] ()
ENDDEF

CNECTDEF Sut ::=
	CLIENTSOCK
	
	CHAN OUT In HOST "localhost" PORT 7890
	ENCODE In ? x -> ! toString(x)
	
	CHAN IN Out HOST "localhost" PORT 7890
	DECODE Out ! fromString(x) <- ? x
ENDDEF
